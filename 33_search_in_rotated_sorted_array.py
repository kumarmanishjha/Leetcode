# -*- coding: utf-8 -*-
"""33. Search in Rotated Sorted Array.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mc06REUjyc17SqHbd-CIMha_aL1nUO6O
"""

from typing import List
import numpy as np

class Solution:
    def search(self, nums: List[int], target: int) -> int:
      f = 0
      l = len(nums) - 1
      pivot = self.findPivot(nums, f, l)
      if pivot == -1:
        return self.binarySearch(nums, 0, len(nums)-1, target)

      if nums[pivot] == target:
        return pivot
      elif nums[0] <= target:
        return self.binarySearch(nums, 0, pivot-1, target)
      return self.binarySearch(nums, pivot, len(nums)-1, target)

    def findPivot(self, arr, first, last):
      if(last < first):
        return -1
      if first == last:
        return last

      mid= (first + last) // 2

      if mid < last and arr[mid] >  arr[mid + 1]:
        return mid
      if mid > first and arr[mid] < arr[mid - 1]:
        return mid - 1
      if arr[first] >= arr[mid]:
        self.findPivot(arr, first, mid-1)
      return self.findPivot( arr, mid+1, last)

    def binarySearch(self, arr, first, last, target):
      if(last < first):
        return -1
      
      mid = first + last //2
      if(arr[mid] == target):
        return mid
      if(first < mid and  arr[mid] > target):
        return self.binarySearch(arr, first, mid-1, target)
      
      return self.binarySearch(arr, mid+1, last, target)

nums = [4,5,6,7,0,1,2]
target = 0

S = Solution()

S.search(nums, target=6)

